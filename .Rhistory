rm(list = ls())
# import necessryy packages
library(tidyverse)
library(rvest)
#load url
url = "https://www.pro-football-reference.com/players/B/BradTo00.htm"
print(url)
# load html content
page= url %>% read_html()
View(page)
page
m= read_html(url)
m
rm(m)
page %>% html_element(css = "#div_passing")
#get div_passing regular seasion table
passing = page %>% html_element(css = "#div_passing") %>% html_table()
passing
View(passing)
#get div_passing_advanced regular seasion table
passing_advanced = page %>% html_element(css = "#div_passing_advanced") %>% html_table()
View(passing_advanced)
ncol(passing)
ncol(passing_advanced)
dim(passing)
dim(passing_advanced)
library(rvest)
url ="https://www.zomato.com/bakeries-near-me"
zom = read_html(url)
rm(list = ls())
library(rvest)
zomato= read_html("https://www.zomato.com/bakeries-near-me")
phone = "iphone11"
url= paste("https://www.flipkart.com/search?q=", phone)
#to make url string to text
install.packages("text")
library(text)
as.text(url)
library(text)
as.text(url)
# Load the text package
library(text)
# Your character string
char_string <- "This is a character string."
# Convert the character string to a text variable
text_variable <- as.text(char_string)
#to make url string to text
install.packages("text")
install.packages("text")
library(text)
as.text(url)
url
print(url)
cat(url)
page=read_html(url)
library(rvest)
page=read_html(url)
page=read_html("https://www.flipkart.com/search?q=iphone+11&as=on&as-show=on&otracker=AS_Query_OrganicAutoSuggest_1_2_na_na_na&otracker1=AS_Query_OrganicAutoSuggest_1_2_na_na_na&as-pos=1&as-type=HISTORY&suggestionId=iphone+11&requestId=b06d7f61-4cfa-43ec-8d07-5cedca56415c")
View(page)
flipcard_html=read_html("https://www.flipkart.com/search?q=iphone+11&as=on&as-show=on&otracker=AS_Query_OrganicAutoSuggest_1_2_na_na_na&otracker1=AS_Query_OrganicAutoSuggest_1_2_na_na_na&as-pos=1&as-type=HISTORY&suggestionId=iphone+11&requestId=b06d7f61-4cfa-43ec-8d07-5cedca56415c")
bigbox=flipcard_html %>% html_nodes(_1AtVbE col-12-12)
bigbox=flipcard_html %>% html_nodes(._1AtVbE col-12-12)
bigbox=flipcard_html %>% html_node("._1AtVbE col-12-12")
bigbox=flipcard_html %>% html_nodes("._1AtVbE col-12-12")
bigbox
rm(list = ls())
library(rvest)
library(tidyverse)
#Function read_html goes to a website and reads and saves the html code of that website
html <- read_html("https://www.iitk.ac.in/math/faculty")
library(rvest)
library(tidyverse)
html <- read_html("https://www.iitk.ac.in/math/faculty")
# extracting all tags with class = head3. The
# "." indicates class.
name <- html_elements(html, ".head3")
# From all the head3 class, extracting all link tags
name <- html_elements(name, "a")
# Extracting the text associated with the links
name <- html_text(name)
## A faster way
name <- html_elements(html, ".head3 a")
name <- html_text(name)
name = html %>% html_elements(".head3 a") %>% html_text()
name
data= data.frame(name)
View(data)
#exporting data as csv
write.csv(data,"facultyâ€™s_name.csv")
######################################################
#Q2
IMDb <- read_html("https://www.imdb.com/chart/top/")
######################################################
#Q2
IMDb <- read_html("https://www.imdb.com/chart/top/")
#obtain the complete list of the top 250 movies on IMDb.
movies = IMDb %>% html_elements(".ipc-title__text") %>% html_text()
?substring
##apply(X, MARGIN, FUN, ..., simplify = TRUE)  #MARGIN=1(row), 2 (column)
m = matrix(c=(1:10), nrow = 5, ncol = 6)
##apply(X, MARGIN, FUN, ..., simplify = TRUE)  #MARGIN=1(row), 2 (column)
m = matrix((1:10), nrow = 5, ncol = 6)
m
apply(m, 2, sum)
apply(m, 2, prod)
m[,1]
prod(m[,1])
for (i in m) {
print(prod(m[,i]))
}
datasets
library(help = "datasets").
library(help = "datasets")
library(leaflet)
leaflet() %>% addTiles() %>% addMarkers(lng = 74.4247094, lat = 17.9743351, popup = "My Native Location")
library(shiny); runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Project1/class-project-group-15-main/aap.R')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Project1/class-project-group-15-main/aap.R')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Project1/class-project-group-15-main/aap.R')
shiny::runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_06')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_07')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_07')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_07')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_07')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_07')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_07')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_08')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_09')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_09')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_09')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Project1/class-project-group-15-main/aap.R')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_09')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_09')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_09')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_09')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_09')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Shiny/shiny_09')
# Install and load the necessary packages
#install.packages("ggplot2")
library(ggplot2)
# Sample data
data <- data.frame(
category = c("Category A", "Category B", "Category C"),
value = c(30, 50, 20)
)
# Create a pie chart
pie_chart <- ggplot(data, aes(x = "", y = value, fill = category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void()
# Add pop-up labels
pie_chart +
geom_text(
aes(label = paste0(category, ": ", value, "%")),
position = position_stack(vjust = 0.5),
color = "white",
size = 4
)
library(ggplot2)
library(gganimate)
# Install and load the necessary packages
install.packages("gganimate")
# Install and load the necessary packages
#install.packages("gganimate")
library(ggplot2)
library(gganimate)
# Sample data
data <- data.frame(
category = c("Category A", "Category B", "Category C"),
value = c(30, 50, 20)
)
# Create a base pie chart
base_chart <- ggplot(data, aes(x = "", y = value, fill = category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
geom_text(
aes(label = paste0(category, ": ", value, "%")),
position = position_stack(vjust = 0.5),
color = "white",
size = 4
)
# Create an animated pie chart
animated_pie_chart <- base_chart +
transition_states(category, transition_length = 2, state_length = 1) +
enter_fade() +
exit_fade()
# Save the animation as a GIF
anim_save("animated_pie_chart.gif", animate(animated_pie_chart))
install.packages("plotly")
#install.packages("plotly")
library(plotly)
data <- data.frame(
category = c("Category A", "Category B", "Category C"),
value = c(30, 50, 20)
)
pie_chart <- ggplot(data, aes(x = "", y = value, fill = category)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0)
pie_chart
pie_chart_plotly <- ggplotly(pie_chart, tooltip = c("category", "value"), source = "custom") %>%
event_register("plotly_click")
pie_chart_plotly <- ggplotly(pie_chart, tooltip = c("category", "value"), source = "custom") %>%
event_register("plotly_click")
data <- data.frame(
category = c("Category A", "Category B", "Category C"),
value = c(30, 50, 20)
)
# Create a pie chart using ggplot2
pie_chart <- ggplot(data, aes(x = "", y = value, fill = category)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0)
# Convert the ggplot object to a plotly object and add popups
pie_chart_plotly <- ggplotly(pie_chart, tooltip = c("category", "value"))
#install.packages("plotly")
library(plotly)
data <- data.frame(
category = c("Category A", "Category B", "Category C"),
value = c(30, 50, 20)
)
# Create a pie chart using ggplot2
pie_chart <- ggplot(data, aes(x = "", y = value, fill = category)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0)
# Convert the ggplot object to a plotly object and add popups
pie_chart_plotly <- ggplotly(pie_chart, tooltip = c("category", "value"))
ggplotly(pie_chart, tooltip = c("category", "value"))
# Convert the ggplot object to a plotly object and add popups
pie_chart_plotly <- ggplotly(pie_chart, tooltip = c(category, value))
?ggplotly# Display the interactive pie chart
# Convert the ggplot object to a plotly object and add popups
pie_chart_plotly <- ggplotly(pie_chart, tooltip = "all"))
# Convert the ggplot object to a plotly object and add popups
pie_chart_plotly <- ggplotly(pie_chart, tooltip = c("category", "value"))
# Convert the ggplot object to a plotly object and add popups
pie_chart_plotly <- ggplotly(pie_chart)
# Create a pie chart using ggplot2
pie_chart <- ggplot(data, aes(x = "", y = value, fill = category)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0)
# Convert the ggplot object to a plotly object and add popups
pie_chart_plotly <- ggplotly(pie_chart)
pie_chart
#install.packages("plotly")
library(plotly)
# Convert the ggplot object to a plotly object and add popups
pie_chart_plotly <- ggplotly(pie_chart)
# Load the necessary packages
library(ggplot2)
library(plotly)
# Sample data
data <- data.frame(
category = c("Category A", "Category B", "Category C"),
value = c(30, 50, 20)
)
# Create a pie chart using ggplot2
pie_chart <- ggplot(data, aes(x = "", y = value, fill = category)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0)
# Convert the ggplot object to a plotly object and add popups
pie_chart_plotly <- plot_ly(
data,
labels = ~category,
values = ~value,
type = "pie",
textinfo = "label+percent",
hoverinfo = "text",
marker = list(colors = data$category)
)
# Display the interactive pie chart
pie_chart_plotly
# Load the necessary packages
library(ggplot2)
library(plotly)
# Sample data
data <- data.frame(
category = c("Category A", "Category B", "Category C"),
value = c(30, 50, 20)
)
# Create a pie chart using ggplot2
pie_chart <- ggplot(data, aes(x = "", y = value, fill = category)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0)
# Convert the ggplot object to a plotly object and add popups
pie_chart_plotly <- ggplotly(pie_chart) %>%
layout(
hoverlabel = list(bgcolor = "white", font = list(color = "black")),
showlegend = FALSE
)
# Display the interactive pie chart
pie_chart_plotly
# Load the necessary packages
library(ggplot2)
library(plotly)
# Sample data
data <- data.frame(
category = c("Category A", "Category B", "Category C"),
value = c(30, 50, 20)
)
# Create a pie chart using ggplot2
pie_chart <- ggplot(data, aes(x = "", y = value, fill = category)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0)
# Convert the ggplot object to a plotly object
pie_chart_plotly <- ggplotly(pie_chart)
# Display the interactive pie chart
pie_chart_plotly
# Sample data
data <- data.frame(
category = c("Category A", "Category B", "Category C"),
value = c(30, 50, 20)
)
# Create a pie chart using ggplot2
pie_chart <- ggplot(data, aes(x = "", y = value, fill = category)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0)
# Convert the ggplot object to a plotly object
pie_chart_plotly <- ggplotly(pie_chart)
# Display the interactive pie chart
pie_chart_plotly
shiny::runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Final project')
runApp('C:/Users/heman/OneDrive/Desktop/MTH208/Final project')
# Your data
df <- data.frame(
Date = c("May", "May", "June", "June", "July", "July", "August", "September", "September", "September", "October", "October"),
Surface = c(12.08, 11.68, 8.69, 2.26, 4.54, 2.13, 6.34, 9.33, 10.98, 9.59, 16.07, 9.12),
pH = c(8.56, 8.90, 9.07, 7.49, 7.77, 8.17, 8.62, 9.03, 8.58, 8.61, 8.70, 8.07),
Temperature = c(11.16, 8.76, 14.65, 17.51, 23.82, 25.29, 26.50, 24.31, 21.02, 17.33, 10.39, 6.38)
)
# Reshape the data for ggplot
library(tidyr)
df_long <- pivot_longer(df, cols = c(Surface, pH, Temperature), names_to = "Variable", values_to = "Value")
# Create multiple bar plot
ggplot(df_long, aes(x = Date, y = Value, fill = Variable)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
ggtitle("Multiple Bar Plot") +
xlab("Month") +
ylab("Value") +
scale_fill_manual(values = c("Surface" = "red", "pH" = "blue", "Temperature" = "green")) +
theme_minimal()
# Install and load ggplot2 package
#install.packages("ggplot2")
library(ggplot2)
# Your data
df <- data.frame(
Date = c("May", "May", "June", "June", "July", "July", "August", "September", "September", "September", "October", "October"),
Surface = c(12.08, 11.68, 8.69, 2.26, 4.54, 2.13, 6.34, 9.33, 10.98, 9.59, 16.07, 9.12),
pH = c(8.56, 8.90, 9.07, 7.49, 7.77, 8.17, 8.62, 9.03, 8.58, 8.61, 8.70, 8.07),
Temperature = c(11.16, 8.76, 14.65, 17.51, 23.82, 25.29, 26.50, 24.31, 21.02, 17.33, 10.39, 6.38)
)
# Reshape the data for ggplot
library(tidyr)
df_long <- pivot_longer(df, cols = c(Surface, pH, Temperature), names_to = "Variable", values_to = "Value")
# Create multiple bar plot
ggplot(df_long, aes(x = Date, y = Value, fill = Variable)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
ggtitle("Multiple Bar Plot") +
xlab("Month") +
ylab("Value") +
scale_fill_manual(values = c("Surface" = "red", "pH" = "blue", "Temperature" = "green")) +
theme_minimal()
View(df)
colnames(df)
library(rvest)
# Specify the URL of the Wikipedia page
url <- "https://en.wikipedia.org/wiki/List_of_banks_in_India"
# Read the HTML content of the webpage
webpage <- read_html(url)
# Extract the table nodes
table_nodes <- html_nodes(webpage, "table")
# Select the first table and convert it to a data frame
table_data <- html_table(table_nodes, fill = TRUE)[[1]]
# Print the scraped data
print(table_data)
# Select the first table and convert it to a data frame
table_data <- html_table(table_nodes, fill = TRUE)[[2]]
# Print the scraped data
print(table_data)
# Select the first table and convert it to a data frame
table_data <- html_table(table_nodes, fill = TRUE)[[3]]
# Print the scraped data
print(table_data)
View(table_data)
# Install and load necessary packages
#install.packages(c("rvest", "ggmap"))
library(rvest)
library(ggmap)
# Specify the URL of the Wikipedia page
url <- "https://en.wikipedia.org/wiki/List_of_banks_in_India"
# Read the HTML content of the webpage
webpage <- read_html(url)
# Extract the table nodes
table_nodes <- html_nodes(webpage, "table")
# Select the first table and convert it to a data frame
table_data <- html_table(table_nodes, fill = TRUE)[[1]]
# Assuming the 'Location' column contains the addresses
addresses <- table_data$Location
# Function to geocode addresses
geocode_addresses <- function(addresses) {
geocoded <- geocode(addresses, output = "latlon", source = "google", key = "YOUR_GOOGLE_MAPS_API_KEY")
return(geocoded)
}
# Geocode addresses to get latitude and longitude
geocoded_data <- geocode_addresses(addresses)
# Add latitude and longitude columns to the table_data
table_data$Latitude <- geocoded_data$lat
table_data$Longitude <- geocoded_data$lon
# Print the updated table
print(table_data)
View(table_data)
shiny::runApp('C:/Users/heman/OneDrive/Desktop/MTH208/project_final/Final project')
# URL of the webpage
url <- "https://www.iitk.ac.in/math/visitors-post-doctoral-fellow"
# Read the HTML content of the webpage
webpage <- read_html(url)
# Load necessary library
library(rvest)
# URL of the webpage
url <- "https://www.iitk.ac.in/math/visitors-post-doctoral-fellow"
install.packages("rvest")
# Load necessary library
library(rvest)
#install.packages("rvest")
# URL of the webpage
url <- "https://www.iitk.ac.in/math/visitors-post-doctoral-fellow"
# Read the HTML content of the webpage
webpage <- read_html(url)
# Scrape the table containing post-doctoral fellow information
postdoc_table <- webpage %>%
html_nodes("table") %>%
.[[1]] %>%
html_table()
# View the scraped table
print(postdoc_table)
x= 0:100
prob = dpois(x , lambda = 4)
plot(x,prob, main = "Poisson pmf")
dpois(x=2,lambda = 4)
dpois(2,4)
# generate 5 random numbers from P(4)
rpois(n = 5,lambda = 4)
data <- read.csv("assign4_train.csv")
y <- data$y # response variable
X <- data[-1] #explanatory variables
X <- as.matrix(X)
dim(X)
dim(data)
n <- dim(X)[1]
p <- dim(X)[2]
lamda <- c(10^(seq(-8, 8, by = .1)))
alpha <- seq(1, 2, length = 10)
# Cross validation error will be in the form of a matrix
CV_error <- matrix(0, ncol = length(alpha), nrow = length(lamda))
bridgeReg <- function(y.this, X.this, alpha, lambda, max.iter, tol = 1e-3)
{
# a value larger than tol
distance <- tol + 1
iter <- 0
p <- dim(X)[2]
# starting from the ridge solution
current <- qr.solve(t(X.this) %% X.this + lambda*diag(p)) %% t(X.this) %*% y.this
while(distance > tol)
{
iter <- iter + 1
if(iter > max.iter)
{
print("Maximum iterations reached")
break
}
# MM steps
previous <- current
mjs <- alpha* abs(current)^(alpha - 2)
## using qr.solve since that is more stable than solve
current <- qr.solve(t(X.this)%%X.this + lambda/alpha * diag(mjs), tol = 1-09) %% t(X.this) %*% y.this
distance <- norm(previous - current, "2")
}
#returning the last iterate of the
return(current)
}
permutation <- sample(1:n, replace = FALSE)
K <- 4
# Making a list of indices for each split
test.index <- split(permutation, rep(1:K, length = n, each = n/K))
for(a in 1:length(alpha.vec))
{
alpha <- alpha.vec[a]
print(paste("Current alpha is", alpha))
for(l in 1:length(lamda.vec))
{
track.cv <- 0
lam <- lamda.vec[l]
for(i in 1:K)
{
train.ind <- test.index[[i]]
# Making training data
X.train <- X[-train.ind, ] # removing ith X
y.train <- y[-train.ind] #removing ith y
# fitting model for training data
# requires lots of iterations
beta.train <- bridgeReg(y.train, X.train, alpha, lam, max.iter = 1e5)
# test error
track.cv <- track.cv + sum((y[train.ind] - X[train.ind, ] %*% beta.train)^2)
}
CV.error[l, a] <- track.cv/n
}
}
index <- which(CV.error == min(CV.error), arr.ind = TRUE)
(chosen.lamda <- lamda.vec[index[1]])
(chosen.alpha <- alpha.vec[index[2]])
(beta.final <- bridgeReg(y, X, chosen.alpha, chosen.lamda, max.iter = 2e5))
shiny::runApp('C:/Users/heman/Downloads/Final project')
setwd("C:/Users/heman/Documents/Python Programing/My Projects/class-project-group-15-main (2)/class-project-group-15-main")
runApp('Shiny App final app.R')
